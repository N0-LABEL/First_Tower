import discord
from discord.ext import commands, tasks
from discord import app_commands
import asyncio
import pytz
from datetime import datetime
import aiohttp
import re
import logging
import os

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# === Configuration ===
TOKEN = os.getenv("DISCORD_TOKEN", "")
GUILD_ID = 1225075859333845154  # Server ID
VOICE_CHANNEL_ID = 1262879963183317176  # Voice channel ID
TEXT_CHANNEL_ID = 1408154723189657661  # Text channel ID
SOUND_FILE = "sound.mp3"  # Sound file

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

COUNTRIES = [
    "–†–æ—Å—Å–∏—è", "–ì–µ—Ä–º–∞–Ω–∏—è", "–ß–µ—Ö–∏—è", "–£–∫—Ä–∞–∏–Ω–∞"
]

URLS = {
    "–†–æ—Å—Å–∏—è": "https://autotraveler.ru/russia/#fuel",
    "–ì–µ—Ä–º–∞–Ω–∏—è": "https://autotraveler.ru/germany/#fuel",
    "–ß–µ—Ö–∏—è": "https://autotraveler.ru/czech/#fuel",
    "–£–∫—Ä–∞–∏–Ω–∞": "https://autotraveler.ru/ukraine/#fuel"
}

# Country flags mapping
COUNTRY_FLAGS = {
    "–†–æ—Å—Å–∏—è": "üá∑üá∫", "–ì–µ—Ä–º–∞–Ω–∏—è": "üá©üá™", "–ß–µ—Ö–∏—è": "üá®üáø", "–£–∫—Ä–∞–∏–Ω–∞": "üá∫üá¶"
}

# Regex patterns that work with actual website HTML structure
PATTERNS = {
    "–†–æ—Å—Å–∏—è": {
        "petrol": [
            r"–ê–ò-95</span>.*?RUB.*?<span[^>]*>([\d\.,]+)</span>\s*\(‚Ç¨[^\d]*([\d\.,]+)\)",  # HTML with RUB and EUR
            r"–ê–ò-95</span>.*?‚Ç¨[^\d]*([\d\.,]+)",  # EUR from HTML
            r"–ê–ò-95.*?‚Ç¨\s*([\d\.,]+)",  # Fallback EUR
        ],
        "diesel": [
            r"–î–¢</span>.*?RUB.*?<span[^>]*>([\d\.,]+)</span>\s*\(‚Ç¨[^\d]*([\d\.,]+)\)",  # HTML with RUB and EUR
            r"–î–¢</span>.*?‚Ç¨[^\d]*([\d\.,]+)",  # EUR from HTML
            r"–î–¢[^–ü].*?‚Ç¨\s*([\d\.,]+)",  # Fallback EUR (avoid –î–¢–ü)
        ],
    },
    "–ì–µ—Ä–º–∞–Ω–∏—è": {
        "petrol": [
            r"Super\s*\(95\).*?‚Ç¨.*?<span[^>]*>([\d\.,]+)</span>",  # HTML span structure
            r"E10.*?‚Ç¨.*?<span[^>]*>([\d\.,]+)</span>",  # Alternative E10 pattern
            r"Super\s*\(95\).*?‚Ç¨.*?([\d\.,]+)",  # Fallback
        ],
        "diesel": [
            r"Diesel.*?‚Ç¨.*?<span[^>]*>([\d\.,]+)</span>",  # HTML span structure
            r"Diesel.*?‚Ç¨.*?([\d\.,]+)",  # Fallback
        ],
    },
    "–ß–µ—Ö–∏—è": {
        "petrol": [
            r"Natural\s*95</span>.*?CZK.*?<span[^>]*>([\d\.,]+)</span>\s*\(‚Ç¨\s*([\d\.,]+)\)",  # HTML with CZK and EUR
            r"Natural\s*95</span>.*?‚Ç¨\s*([\d\.,]+)",  # EUR from HTML
            r"Natural\s*95.*?‚Ç¨\s*([\d\.,]+)",  # Fallback EUR
        ],
        "diesel": [
            r"Nafta</span>.*?CZK.*?<span[^>]*>([\d\.,]+)</span>\s*\(‚Ç¨\s*([\d\.,]+)\)",  # HTML with CZK and EUR
            r"Nafta</span>.*?‚Ç¨\s*([\d\.,]+)",  # EUR from HTML
            r"Nafta.*?‚Ç¨\s*([\d\.,]+)",  # Fallback EUR
        ],
    },
    "–£–∫—Ä–∞–∏–Ω–∞": {
        "petrol": [
            r"–ê–ò-95</span>.*?UAH.*?<span[^>]*>([\d\.,]+)</span>\s*\(‚Ç¨\s*([\d\.,]+)\)",  # HTML with UAH and EUR
            r"–ê–ò-95.*?UAH.*?([\d\.,]+).*?\(‚Ç¨\s*([\d\.,]+)\)",  # Alternative pattern
            r"–ê–ò-95.*?‚Ç¨\s*([\d\.,]+)",  # Fallback EUR only
        ],
        "diesel": [
            r"–î–¢</span>.*?UAH.*?<span[^>]*>([\d\.,]+)</span>\s*\(‚Ç¨\s*([\d\.,]+)\)",  # HTML with UAH and EUR
            r"–î–¢.*?UAH.*?([\d\.,]+).*?\(‚Ç¨\s*([\d\.,]+)\)",  # Alternative pattern
            r"–î–¢[^–ü].*?‚Ç¨\s*([\d\.,]+)",  # Fallback EUR only
        ],
    }
}

# Country-specific currency information
COUNTRY_CURRENCIES = {
    "–†–æ—Å—Å–∏—è": "RUB", "–ì–µ—Ä–º–∞–Ω–∏—è": "EUR", "–ß–µ—Ö–∏—è": "CZK", "–£–∫—Ä–∞–∏–Ω–∞": "UAH"
}


# Enhanced patterns for better data extraction
def get_country_patterns(country):
    """Get regex patterns for a specific country"""
    if country in PATTERNS:
        return PATTERNS[country]

    # Improved patterns that focus on realistic price ranges and avoid date/time matches
    return {
        "petrol": [
            # More specific patterns that avoid large numbers and dates
            r"(?:Super|Petrol|Benzin|95|E5|SP95).*?‚Ç¨\s*([0-3]\.\d{1,3})",  # EUR prices 0-3.999
            r"(?:Super|Petrol|Benzin|95|E5|SP95).*?(\d{1,3}\.\d{1,3})\s*‚Ç¨",  # EUR prices reversed
            r"95.*?‚Ç¨\s*([0-3]\.\d{1,3})",  # 95 octane EUR
            r"–±–µ–Ω–∑–∏–Ω.*?([0-9]{1,3}\.[0-9]{1,3})",  # Local currency (more conservative)
        ],
        "diesel": [
            r"(?:Diesel|Dizel|–î–∏–∑–µ–ª—å).*?‚Ç¨\s*([0-3]\.\d{1,3})",  # EUR prices 0-3.999
            r"(?:Diesel|Dizel|–î–∏–∑–µ–ª—å).*?(\d{1,3}\.\d{1,3})\s*‚Ç¨",  # EUR prices reversed
            r"–¥–∏–∑–µ–ª—å.*?([0-9]{1,3}\.[0-9]{1,3})",  # Local currency
        ],
    }


def format_price(country, fuel_type, match, pattern):
    """Format price based on country and available data"""
    try:
        if not match:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        groups = match.groups()

        if country == "–†–æ—Å—Å–∏—è":
            if len(groups) >= 2 and groups[1]:  # RUB with EUR
                rub_price = groups[0].replace(",", ".")
                eur_price = groups[1].replace(",", ".")
                return f"{rub_price} RUB (‚Ç¨{eur_price})"
            elif len(groups) >= 1 and groups[0]:  # Single currency
                price = groups[0].replace(",", ".")
                if "RUB" in pattern:
                    return f"{price} RUB"
                else:
                    return f"‚Ç¨{price}"

        elif country == "–ì–µ—Ä–º–∞–Ω–∏—è":
            if len(groups) >= 1 and groups[0]:
                price = groups[0].replace(",", ".")
                return f"‚Ç¨{price}"

        elif country == "–ß–µ—Ö–∏—è":
            if len(groups) >= 2 and groups[1]:  # CZK with EUR
                czk_price = groups[0].replace(",", ".")
                eur_price = groups[1].replace(",", ".")
                return f"{czk_price} CZK (‚Ç¨{eur_price})"
            elif len(groups) >= 1 and groups[0]:  # Single currency
                price = groups[0].replace(",", ".")
                if "CZK" in pattern:
                    return f"{price} CZK"
                else:
                    return f"‚Ç¨{price}"

        elif country == "–£–∫—Ä–∞–∏–Ω–∞":
            if len(groups) >= 2 and groups[1]:  # UAH with EUR
                uah_price = groups[0].replace(",", ".")
                eur_price = groups[1].replace(",", ".")
                return f"{uah_price} UAH (‚Ç¨{eur_price})"
            elif len(groups) >= 1 and groups[0]:  # Single currency
                price = groups[0].replace(",", ".")
                if "UAH" in pattern:
                    return f"{price} UAH"
                else:
                    return f"‚Ç¨{price}"

        # Enhanced formatting for all other countries with local currency
        else:
            if len(groups) >= 1 and groups[0]:
                price = groups[0].replace(",", ".")
                currency = COUNTRY_CURRENCIES.get(country, "EUR")

                # For EUR countries and EUR prices detected
                if currency == "EUR" or "‚Ç¨" in pattern:
                    try:
                        price_float = float(price)
                        # Validate EUR price ranges
                        if 0.5 <= price_float <= 3.0:
                            return f"‚Ç¨{price}"
                        else:
                            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"  # Invalid EUR price range
                    except:
                        return f"‚Ç¨{price}"
                else:
                    # For non-EUR countries with local currency data
                    try:
                        price_float = float(price)
                        # Simple conversion estimates for our countries
                        eur_estimates = {
                            "RUB": price_float * 0.011,
                            "CZK": price_float * 0.041,
                            "UAH": price_float * 0.024
                        }

                        if currency in eur_estimates and price_float < 10000:  # Reasonable local currency check
                            eur_price = round(eur_estimates[currency], 3)
                            if 0.3 <= eur_price <= 5.0:  # Reasonable EUR equivalent range
                                return f"{price} {currency} (‚Ç¨{eur_price})"
                            else:
                                return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"  # Invalid converted price
                        else:
                            return f"{price} {currency}"
                    except:
                        return f"{price} {currency}"

        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    except Exception as e:
        logger.error(f"Error formatting price for {country} {fuel_type}: {e}")
        return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"


async def fetch_country_price(session, country):
    """Fetch fuel prices for a specific country"""
    url = URLS[country]
    patterns = get_country_patterns(country)
    result = {"petrol": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "diesel": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

    try:
        async with session.get(url, headers={
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}) as resp:
            if resp.status != 200:
                logger.error(f"Failed to fetch {country}: HTTP {resp.status}")
                return result

            text = await resp.text()
            logger.info(f"Successfully fetched data for {country}")

            # Parse petrol prices
            for i, pattern in enumerate(patterns["petrol"]):
                match = re.search(pattern, text, re.IGNORECASE | re.DOTALL)
                if match:
                    result["petrol"] = format_price(country, "petrol", match, pattern)
                    logger.info(
                        f"{country} petrol found with pattern {i + 1}: {result['petrol']} (groups: {match.groups()})")
                    break
                else:
                    logger.debug(f"{country} petrol pattern {i + 1} failed")

            # Parse diesel prices
            for i, pattern in enumerate(patterns["diesel"]):
                match = re.search(pattern, text, re.IGNORECASE | re.DOTALL)
                if match:
                    result["diesel"] = format_price(country, "diesel", match, pattern)
                    logger.info(
                        f"{country} diesel found with pattern {i + 1}: {result['diesel']} (groups: {match.groups()})")
                    break
                else:
                    logger.debug(f"{country} diesel pattern {i + 1} failed")

            if result["petrol"] == "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö":
                logger.warning(f"No petrol price found for {country}")
            if result["diesel"] == "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö":
                logger.warning(f"No diesel price found for {country}")

    except asyncio.TimeoutError:
        logger.error(f"Timeout while fetching data for {country}")
    except Exception as e:
        logger.error(f"Error fetching data for {country}: {e}")

    return result


async def fetch_fuel_prices():
    """Fetch fuel prices for all countries"""
    timeout = aiohttp.ClientTimeout(total=30)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        results = {}
        for country in COUNTRIES:
            logger.info(f"Fetching prices for {country}")
            results[country] = await fetch_country_price(session, country)
        return results


# Global variables
fuel_data = {}
last_price_message_id = None


async def connect_voice():
    """Connect to voice channel (simplified to reduce reconnection loops)"""
    try:
        await bot.wait_until_ready()
        guild = bot.get_guild(GUILD_ID)
        if not guild:
            logger.error("Guild not found")
            return

        channel = guild.get_channel(VOICE_CHANNEL_ID)
        if channel and not guild.voice_client:
            await channel.connect()
            logger.info("Connected to voice channel")
    except Exception as e:
        logger.error(f"Failed to connect to voice channel: {e}")


async def play_sound():
    """Play notification sound"""
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        return

    vc = guild.voice_client
    if vc and vc.is_connected() and not vc.is_playing():
        try:
            if os.path.exists(SOUND_FILE):
                vc.stop()
                vc.play(discord.FFmpegPCMAudio(SOUND_FILE))
                logger.info("Playing notification sound")
            else:
                logger.warning(f"Sound file {SOUND_FILE} not found")
        except Exception as e:
            logger.error(f"Error playing sound: {e}")


async def update_prices():
    """Update fuel prices from web sources"""
    global fuel_data
    try:
        logger.info("Updating fuel prices...")
        data = await fetch_fuel_prices()
        fuel_data.clear()
        fuel_data.update(data)
        logger.info("Fuel prices updated successfully")
    except Exception as e:
        logger.error(f"Error updating prices: {e}")


async def send_prices(channel, liters=1, new_message=False, edit_message=False):
    """Send fuel prices embed to channel"""
    global last_price_message_id

    if not fuel_data:
        embed = discord.Embed(
            title="‚õΩ –¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ",
            color=0x00ffcc,
            description=""
        )
        embed.add_field(
            name="‚ùå –û—à–∏–±–∫–∞",
            value="–î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            inline=False
        )
        if new_message:
            await channel.send(embed=embed)
        return

    # Simple single embed for 4 countries
    embed = discord.Embed(
        title=f"‚õΩ –¶–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ ({liters} –ª)",
        color=0x00ffcc,
        description=""
    )

    for country, values in fuel_data.items():
        petrol_price = values["petrol"]
        diesel_price = values["diesel"]

        # Calculate prices for multiple liters if needed
        if liters != 1 and petrol_price != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" and "‚Ç¨" in petrol_price:
            eur_match = re.search(r"‚Ç¨([\d\.,]+)", petrol_price)
            if eur_match:
                try:
                    base_price = float(eur_match.group(1).replace(",", "."))
                    calculated_price = round(base_price * liters, 2)
                    petrol_price += f" ‚Üí ‚Ç¨{calculated_price} –∑–∞ {liters}–ª"
                except:
                    pass

        if liters != 1 and diesel_price != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" and "‚Ç¨" in diesel_price:
            eur_match = re.search(r"‚Ç¨([\d\.,]+)", diesel_price)
            if eur_match:
                try:
                    base_price = float(eur_match.group(1).replace(",", "."))
                    calculated_price = round(base_price * liters, 2)
                    diesel_price += f" ‚Üí ‚Ç¨{calculated_price} –∑–∞ {liters}–ª"
                except:
                    pass

        flag = COUNTRY_FLAGS.get(country, "üè≥Ô∏è")
        embed.add_field(
            name=f"{flag} {country}",
            value=f"‚õΩ –ë–µ–Ω–∑–∏–Ω: **{petrol_price}**\nüõ¢ –î–∏–∑–µ–ª—å: **{diesel_price}**",
            inline=False
        )

    try:
        if new_message:
            msg = await channel.send(embed=embed)
            last_price_message_id = msg.id
    except Exception as e:
        logger.error(f"Error sending prices message: {e}")

def in_correct_text_channel():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω—É–∂–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ"""
    async def predicate(interaction: discord.Interaction):
        if interaction.channel_id == TEXT_CHANNEL_ID:
            return True
        await interaction.response.send_message(
            f"‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ <#{TEXT_CHANNEL_ID}>!",
            ephemeral=True
        )
        return False
    return app_commands.check(predicate)
    
    
# Removed auto-reconnection loop to prevent constant reconnection issues

@tasks.loop(minutes=1)
async def midnight_task():
    """Task that runs at midnight Moscow time"""
    tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(tz)
    if now.hour == 0 and now.minute == 0 and now.second < 30:
        logger.info("Midnight task triggered")
        await asyncio.sleep(15)  # Wait a bit to ensure proper execution
        await update_prices()
        channel = bot.get_channel(TEXT_CHANNEL_ID)
        if channel:
            await send_prices(channel, new_message=True)
            await play_sound()


@bot.tree.command(name="price", description="–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤")
@app_commands.describe(liters="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤")
@in_correct_text_channel()
async def price(interaction: discord.Interaction, liters: float):
    """Slash command to get fuel prices"""
    if liters <= 0:
        await interaction.response.send_message("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!", ephemeral=True)
        return

    if liters > 1000:
        await interaction.response.send_message("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤! –ú–∞–∫—Å–∏–º—É–º 1000–ª.", ephemeral=True)
        return

    await interaction.response.defer()

    try:
        await send_prices(interaction.followup, liters=liters, new_message=True)
        await play_sound()
    except Exception as e:
        logger.error(f"Error in price command: {e}")
        await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ.")


@bot.tree.command(name="update", description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ")
@in_correct_text_channel()
async def update_command(interaction: discord.Interaction):
    """Slash command to manually update prices"""
    await interaction.response.defer()

    try:
        await update_prices()
        await send_prices(interaction.followup, new_message=True)
        await play_sound()
    except Exception as e:
        logger.error(f"Error in update command: {e}")
        await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω.")


@bot.event
async def on_ready():
    """Bot ready event"""
    try:
        logger.info(f"–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω! ID: {bot.user.id}")

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–ª—è –≥–∏–ª—å–¥–∏–∏
            bot.tree.copy_global_to(guild=discord.Object(id=GUILD_ID))
            synced = await bot.tree.sync(guild=discord.Object(id=GUILD_ID))
            logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥: {[cmd.name for cmd in synced]}")
        except Exception as sync_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≥–∏–ª—å–¥–∏–∏: {sync_error}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            try:
                synced = await bot.tree.sync()
                logger.info(f"–ì–ª–æ–±–∞–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
            except Exception as global_error:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {global_error}")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        await connect_voice()

        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
        midnight_task.start()

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω
        await update_prices()
        channel = bot.get_channel(TEXT_CHANNEL_ID)
        if channel:
            await send_prices(channel, new_message=True)
            await play_sound()

        logger.info("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ on_ready: {e}")


@bot.event
async def on_voice_state_update(member, before, after):
    """Handle voice state updates"""
    if member.id == bot.user.id:
        if after.channel is None or after.channel.id != VOICE_CHANNEL_ID:
            await asyncio.sleep(2)
            await connect_voice()


@bot.event
async def on_error(event, *args, **kwargs):
    """Global error handler"""
    logger.error(f"Error in event {event}: {args}")


if __name__ == "__main__":
    try:
        bot.run(TOKEN)
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")

@bot.command()
@commands.is_owner()
async def sync(ctx):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥"""
    try:
        synced = await bot.tree.sync()
        await ctx.send(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥: {[cmd.name for cmd in synced]}")
        logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {len(synced)}")
    except Exception as e:
        await ctx.send(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        logger.error(f"Sync error: {e}")

